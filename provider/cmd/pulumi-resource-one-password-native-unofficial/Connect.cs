// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using pulumi_resource_one_password_native_unofficial;
using pulumi_resource_one_password_native_unofficial.Domain;

namespace GeneratedCode
{
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "0.8.5.0")]
    public partial interface I1PasswordConnect
    {
        [Headers("Accept: application/json")]
        [Get("/v1/activity")]
        Task<ICollection<APIRequest>> GetApiActivity([Query] int? limit, [Query] int? offset);

        [Headers("Accept: application/json")]
        [Get("/v1/vaults")]
        Task<ICollection<Vault>> GetVaults([Query] string filter);

        [Headers("Accept: application/json")]
        [Get("/v1/vaults/{vaultUuid}")]
        Task<Vault> GetVaultById(string vaultUuid);

        [Headers("Accept: application/json")]
        [Get("/v1/vaults/{vaultUuid}/items")]
        Task<ICollection<Item>> GetVaultItems(string vaultUuid, [Query] string filter);

        [Headers("Accept: application/json")]
        [Post("/v1/vaults/{vaultUuid}/items")]
        Task<FullItem> CreateVaultItem(string vaultUuid, [Body] FullItem body);

        [Headers("Accept: application/json")]
        [Get("/v1/vaults/{vaultUuid}/items/{itemUuid}")]
        Task<FullItem> GetVaultItemById(string vaultUuid, string itemUuid);

        [Headers("Accept: application/json")]
        [Put("/v1/vaults/{vaultUuid}/items/{itemUuid}")]
        Task<FullItem> UpdateVaultItem(string vaultUuid, string itemUuid, [Body] FullItem body);

        [Headers("Accept: application/json")]
        [Delete("/v1/vaults/{vaultUuid}/items/{itemUuid}")]
        Task DeleteVaultItem(string vaultUuid, string itemUuid);

        /// <summary>
        /// Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports `add`, `remove` and `replace` operations.
        /// 
        /// When modifying a specific ItemField, the ItemField's ID in the `path` attribute of the operation object: `/fields/{fieldId}`
        /// 
        /// </summary>
        [Headers("Accept: application/json")]
        [Patch("/v1/vaults/{vaultUuid}/items/{itemUuid}")]
        Task<FullItem> PatchVaultItem(string vaultUuid, string itemUuid, [Body] IEnumerable<Anonymous> body);

        [Headers("Accept: application/json")]
        [Get("/v1/vaults/{vaultUuid}/items/{itemUuid}/files")]
        Task<ICollection<File>> GetItemFiles(System.Guid vaultUuid, System.Guid itemUuid, [Query] bool? inline_files);

        [Headers("Accept: application/json")]
        [Get("/v1/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}")]
        Task<File> GetDetailsOfFileById(System.Guid vaultUuid, System.Guid itemUuid, System.Guid fileUuid, [Query] bool? inline_files);

        [Headers("Accept: application/octet-stream, application/json")]
        [Get("/v1/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content")]
        Task<FileResponse> DownloadFileByID(System.Guid vaultUuid, System.Guid itemUuid, string fileUuid);

        [Headers("Accept: text/plain")]
        [Get("/heartbeat")]
        Task<string> GetHeartbeat();

        [Headers("Accept: application/json")]
        [Get("/health")]
        Task<Response> GetServerHealth();

        /// <summary>
        /// See Prometheus documentation for a complete data model.
        /// </summary>
        [Headers("Accept: text/plain")]
        [Get("/metrics")]
        Task<string> GetPrometheusMetrics();


    }
}


//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace GeneratedCode
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ErrorResponse
    {
        /// <summary>
        /// HTTP Status Code
        /// </summary>

        [JsonPropertyName("status")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Status { get; set; }

        /// <summary>
        /// A message detailing the error
        /// </summary>

        [JsonPropertyName("message")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Message { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class File
    {
        /// <summary>
        /// ID of the file
        /// </summary>

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        /// <summary>
        /// Name of the file
        /// </summary>

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        /// <summary>
        /// Size in bytes of the file
        /// </summary>

        [JsonPropertyName("size")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Size { get; set; }

        /// <summary>
        /// Path of the Connect API that can be used to download the contents of this file.
        /// </summary>

        [JsonPropertyName("content_path")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Content_path { get; set; }

        /// <summary>
        /// For files that are in a section, this field describes the section.
        /// </summary>

        [JsonPropertyName("section")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Section Section { get; set; }

        /// <summary>
        /// Base64-encoded contents of the file. Only set if size &lt;= OP_MAX_INLINE_FILE_SIZE_KB kb and `inline_files` is set to `true`.
        /// </summary>

        [JsonPropertyName("content")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public byte[] Content { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Vault
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[\da-z]{26}$")]
        public string Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("description")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        /// <summary>
        /// The vault version
        /// </summary>

        [JsonPropertyName("attributeVersion")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int AttributeVersion { get; set; }

        /// <summary>
        /// The version of the vault contents
        /// </summary>

        [JsonPropertyName("contentVersion")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int ContentVersion { get; set; }

        /// <summary>
        /// Number of active items in the vault
        /// </summary>

        [JsonPropertyName("items")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Items { get; set; }

        [JsonPropertyName("type")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public VaultType Type { get; set; }

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset CreatedAt { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset UpdatedAt { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The recipe is used in conjunction with the "generate" property to set the character set used to generate a new secure value
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class GeneratorRecipe
    {
        /// <summary>
        /// Length of the generated value
        /// </summary>

        [JsonPropertyName("length")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(1, 64)]
        public int Length { get; set; } = 32;

        [JsonPropertyName("characterSets")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   

        // TODO(system.text.json): Add string enum item converter
        public ICollection<CharacterSets> CharacterSets { get; set; }

        /// <summary>
        /// List of all characters that should be excluded from generated passwords.
        /// </summary>

        [JsonPropertyName("excludeCharacters")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ExcludeCharacters { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Item
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[\da-z]{26}$")]
        public string Id { get; set; }

        [JsonPropertyName("title")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Title { get; set; }

        [JsonPropertyName("vault")]

        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Vault2 Vault { get; set; } = new Vault2();

        [JsonPropertyName("category")]

        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ItemCategory Category { get; set; }

        [JsonPropertyName("urls")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<Urls> Urls { get; set; }

        [JsonPropertyName("favorite")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Favorite { get; set; } = false;

        [JsonPropertyName("tags")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> Tags { get; set; }

        [JsonPropertyName("version")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Version { get; set; }

        [JsonPropertyName("state")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ItemState State { get; set; }

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset CreatedAt { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset UpdatedAt { get; set; }

        [JsonPropertyName("lastEditedBy")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string LastEditedBy { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class FullItem : Item
    {

        [JsonPropertyName("sections")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<Sections> Sections { get; set; }

        [JsonPropertyName("fields")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<Field> Fields { get; set; }

        [JsonPropertyName("files")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<File> Files { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Field
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [JsonPropertyName("section")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Section2 Section { get; set; }

        [JsonPropertyName("type")]

        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(FieldTypeConverter))]
        public TemplateFieldType Type { get; set; } = "STRING";

        /// <summary>
        /// Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types.
        /// </summary>

        [JsonPropertyName("purpose")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public FieldPurpose Purpose { get; set; }

        [JsonPropertyName("label")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Label { get; set; }

        [JsonPropertyName("value")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Value { get; set; }

        /// <summary>
        /// If value is not present then a new value should be generated for this field
        /// </summary>

        [JsonPropertyName("generate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Generate { get; set; } = false;

        [JsonPropertyName("recipe")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public GeneratorRecipe Recipe { get; set; }

        /// <summary>
        /// For fields with a purpose of `PASSWORD` this is the entropy of the value
        /// </summary>

        [JsonPropertyName("entropy")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double Entropy { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Represents a request that was made to the API. Including what Token was used and what resource was accessed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class APIRequest
    {
        /// <summary>
        /// The unique id used to identify a single request.
        /// </summary>

        [JsonPropertyName("requestId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid RequestId { get; set; }

        /// <summary>
        /// The time at which the request was processed by the server.
        /// </summary>

        [JsonPropertyName("timestamp")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset Timestamp { get; set; }

        [JsonPropertyName("action")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public APIRequestAction Action { get; set; }

        [JsonPropertyName("result")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public APIRequestResult Result { get; set; }

        [JsonPropertyName("actor")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Actor Actor { get; set; }

        [JsonPropertyName("resource")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Resource Resource { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Patch : System.Collections.ObjectModel.Collection<Anonymous>
    {

    }

    /// <summary>
    /// The state of a registered server dependency.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ServiceDependency
    {

        [JsonPropertyName("service")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Service { get; set; }

        [JsonPropertyName("status")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Status { get; set; }

        /// <summary>
        /// Human-readable message for explaining the current state.
        /// </summary>

        [JsonPropertyName("message")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Message { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Anonymous
    {

        [JsonPropertyName("op")]

        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Op Op { get; set; }

        /// <summary>
        /// An RFC6901 JSON Pointer pointing to the Item document, an Item Attribute, and Item Field by Field ID, or an Item Field Attribute
        /// </summary>

        [JsonPropertyName("path")]

        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; }

        [JsonPropertyName("value")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public object Value { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Response
    {

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The Connect server's version
        /// </summary>

        [JsonPropertyName("version")]

        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Version { get; set; }

        [JsonPropertyName("dependencies")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ServiceDependency> Dependencies { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Section
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum VaultType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"USER_CREATED")]
        USER_CREATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL")]
        PERSONAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EVERYONE")]
        EVERYONE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSFER")]
        TRANSFER = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum CharacterSets
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LETTERS")]
        LETTERS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DIGITS")]
        DIGITS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SYMBOLS")]
        SYMBOLS = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Vault2
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[\da-z]{26}$")]
        public string Id { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum ItemCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LOGIN")]
        LOGIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSWORD")]
        PASSWORD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"API_CREDENTIAL")]
        API_CREDENTIAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SERVER")]
        SERVER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DATABASE")]
        DATABASE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT_CARD")]
        CREDIT_CARD = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MEMBERSHIP")]
        MEMBERSHIP = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT")]
        PASSPORT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SOFTWARE_LICENSE")]
        SOFTWARE_LICENSE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTDOOR_LICENSE")]
        OUTDOOR_LICENSE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SECURE_NOTE")]
        SECURE_NOTE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"WIRELESS_ROUTER")]
        WIRELESS_ROUTER = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BANK_ACCOUNT")]
        BANK_ACCOUNT = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"DRIVER_LICENSE")]
        DRIVER_LICENSE = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"IDENTITY")]
        IDENTITY = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"REWARD_PROGRAM")]
        REWARD_PROGRAM = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT")]
        DOCUMENT = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL_ACCOUNT")]
        EMAIL_ACCOUNT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SOCIAL_SECURITY_NUMBER")]
        SOCIAL_SECURITY_NUMBER = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDICAL_RECORD")]
        MEDICAL_RECORD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"SSH_KEY")]
        SSH_KEY = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 21,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Urls
    {

        [JsonPropertyName("label")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Label { get; set; }

        [JsonPropertyName("primary")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Primary { get; set; }

        [JsonPropertyName("href")]

        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Href { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum ItemState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVED")]
        ARCHIVED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Sections
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        [JsonPropertyName("label")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Label { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Section2
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Id { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum FieldPurpose
    {

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USERNAME")]
        USERNAME = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSWORD")]
        PASSWORD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NOTES")]
        NOTES = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum APIRequestAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"READ")]
        READ = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CREATE")]
        CREATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UPDATE")]
        UPDATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum APIRequestResult
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DENY")]
        DENY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Actor
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid Id { get; set; }

        [JsonPropertyName("account")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Account { get; set; }

        [JsonPropertyName("jti")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Jti { get; set; }

        [JsonPropertyName("userAgent")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string UserAgent { get; set; }

        [JsonPropertyName("requestIp")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string RequestIp { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Resource
    {

        [JsonPropertyName("type")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ResourceType Type { get; set; }

        [JsonPropertyName("vault")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Vault3 Vault { get; set; }

        [JsonPropertyName("item")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Item2 Item { get; set; }

        [JsonPropertyName("itemVersion")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int ItemVersion { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum Op
    {

        [System.Runtime.Serialization.EnumMember(Value = @"add")]
        Add = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"remove")]
        Remove = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"replace")]
        Replace = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum ResourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ITEM")]
        ITEM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VAULT")]
        VAULT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Vault3
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[\da-z]{26}$")]
        public string Id { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Item2
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[\da-z]{26}$")]
        public string Id { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public IReadOnlyDictionary<string, IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, IReadOnlyDictionary<string, IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }



}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
