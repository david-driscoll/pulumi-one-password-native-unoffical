// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumi_one_password_native_unofficial

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func Read(ctx *pulumi.Context, args *ReadArgs, opts ...pulumi.InvokeOption) (*ReadResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv ReadResult
	err := ctx.Invoke("one-password-native-unofficial:index:Read", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ReadArgs struct {
	// The 1Password secret reference path to the item.  eg: op://vault/item/[section]/field
	Reference string `pulumi:"reference"`
}

// The resolved reference value
type ReadResult struct {
	Value *string `pulumi:"value"`
}

func ReadOutput(ctx *pulumi.Context, args ReadOutputArgs, opts ...pulumi.InvokeOption) ReadResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ReadResult, error) {
			args := v.(ReadArgs)
			r, err := Read(ctx, &args, opts...)
			var s ReadResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ReadResultOutput)
}

type ReadOutputArgs struct {
	// The 1Password secret reference path to the item.  eg: op://vault/item/[section]/field
	Reference pulumi.StringInput `pulumi:"reference"`
}

func (ReadOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadArgs)(nil)).Elem()
}

// The resolved reference value
type ReadResultOutput struct{ *pulumi.OutputState }

func (ReadResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadResult)(nil)).Elem()
}

func (o ReadResultOutput) ToReadResultOutput() ReadResultOutput {
	return o
}

func (o ReadResultOutput) ToReadResultOutputWithContext(ctx context.Context) ReadResultOutput {
	return o
}

func (o ReadResultOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadResult) *string { return v.Value }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ReadResultOutput{})
}
