// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumi_one_password_native_unofficial

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func Inject(ctx *pulumi.Context, args *InjectArgs, opts ...pulumi.InvokeOption) (*InjectResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv InjectResult
	err := ctx.Invoke("one-password-native-unofficial:index:Inject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type InjectArgs struct {
	// The template that you want transformed with secrets
	Template string `pulumi:"template"`
}

// The result template with secrets replaced
type InjectResult struct {
	Result *string `pulumi:"result"`
}

func InjectOutput(ctx *pulumi.Context, args InjectOutputArgs, opts ...pulumi.InvokeOption) InjectResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (InjectResult, error) {
			args := v.(InjectArgs)
			r, err := Inject(ctx, &args, opts...)
			var s InjectResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(InjectResultOutput)
}

type InjectOutputArgs struct {
	// The template that you want transformed with secrets
	Template pulumi.StringInput `pulumi:"template"`
}

func (InjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InjectArgs)(nil)).Elem()
}

// The result template with secrets replaced
type InjectResultOutput struct{ *pulumi.OutputState }

func (InjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InjectResult)(nil)).Elem()
}

func (o InjectResultOutput) ToInjectResultOutput() InjectResultOutput {
	return o
}

func (o InjectResultOutput) ToInjectResultOutputWithContext(ctx context.Context) InjectResultOutput {
	return o
}

func (o InjectResultOutput) Result() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InjectResult) *string { return v.Result }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(InjectResultOutput{})
}
