// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumi_one_password_native_unoffical

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Field struct {
	Type  *FieldAssignmentType `pulumi:"type"`
	Value string               `pulumi:"value"`
}

// Defaults sets the appropriate defaults for Field
func (val *Field) Defaults() *Field {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Type) {
		type_ := FieldAssignmentType("text")
		tmp.Type = &type_
	}
	return &tmp
}

// FieldInput is an input type that accepts FieldArgs and FieldOutput values.
// You can construct a concrete instance of `FieldInput` via:
//
//	FieldArgs{...}
type FieldInput interface {
	pulumi.Input

	ToFieldOutput() FieldOutput
	ToFieldOutputWithContext(context.Context) FieldOutput
}

type FieldArgs struct {
	Type  FieldAssignmentTypePtrInput `pulumi:"type"`
	Value pulumi.StringInput          `pulumi:"value"`
}

func (FieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Field)(nil)).Elem()
}

func (i FieldArgs) ToFieldOutput() FieldOutput {
	return i.ToFieldOutputWithContext(context.Background())
}

func (i FieldArgs) ToFieldOutputWithContext(ctx context.Context) FieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldOutput)
}

// FieldMapInput is an input type that accepts FieldMap and FieldMapOutput values.
// You can construct a concrete instance of `FieldMapInput` via:
//
//	FieldMap{ "key": FieldArgs{...} }
type FieldMapInput interface {
	pulumi.Input

	ToFieldMapOutput() FieldMapOutput
	ToFieldMapOutputWithContext(context.Context) FieldMapOutput
}

type FieldMap map[string]FieldInput

func (FieldMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Field)(nil)).Elem()
}

func (i FieldMap) ToFieldMapOutput() FieldMapOutput {
	return i.ToFieldMapOutputWithContext(context.Background())
}

func (i FieldMap) ToFieldMapOutputWithContext(ctx context.Context) FieldMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldMapOutput)
}

type FieldOutput struct{ *pulumi.OutputState }

func (FieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Field)(nil)).Elem()
}

func (o FieldOutput) ToFieldOutput() FieldOutput {
	return o
}

func (o FieldOutput) ToFieldOutputWithContext(ctx context.Context) FieldOutput {
	return o
}

func (o FieldOutput) Type() FieldAssignmentTypePtrOutput {
	return o.ApplyT(func(v Field) *FieldAssignmentType { return v.Type }).(FieldAssignmentTypePtrOutput)
}

func (o FieldOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v Field) string { return v.Value }).(pulumi.StringOutput)
}

type FieldMapOutput struct{ *pulumi.OutputState }

func (FieldMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Field)(nil)).Elem()
}

func (o FieldMapOutput) ToFieldMapOutput() FieldMapOutput {
	return o
}

func (o FieldMapOutput) ToFieldMapOutputWithContext(ctx context.Context) FieldMapOutput {
	return o
}

func (o FieldMapOutput) MapIndex(k pulumi.StringInput) FieldOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Field {
		return vs[0].(map[string]Field)[vs[1].(string)]
	}).(FieldOutput)
}

type OutAttachment struct {
	Name      string `pulumi:"name"`
	Reference string `pulumi:"reference"`
	Size      int    `pulumi:"size"`
	Uuid      string `pulumi:"uuid"`
}

type OutField struct {
	Label     string            `pulumi:"label"`
	Reference string            `pulumi:"reference"`
	Type      ResponseFieldType `pulumi:"type"`
	Uuid      string            `pulumi:"uuid"`
	Value     string            `pulumi:"value"`
}

type OutFieldOutput struct{ *pulumi.OutputState }

func (OutFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutField)(nil)).Elem()
}

func (o OutFieldOutput) ToOutFieldOutput() OutFieldOutput {
	return o
}

func (o OutFieldOutput) ToOutFieldOutputWithContext(ctx context.Context) OutFieldOutput {
	return o
}

func (o OutFieldOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v OutField) string { return v.Label }).(pulumi.StringOutput)
}

func (o OutFieldOutput) Reference() pulumi.StringOutput {
	return o.ApplyT(func(v OutField) string { return v.Reference }).(pulumi.StringOutput)
}

func (o OutFieldOutput) Type() ResponseFieldTypeOutput {
	return o.ApplyT(func(v OutField) ResponseFieldType { return v.Type }).(ResponseFieldTypeOutput)
}

func (o OutFieldOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v OutField) string { return v.Uuid }).(pulumi.StringOutput)
}

func (o OutFieldOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v OutField) string { return v.Value }).(pulumi.StringOutput)
}

type OutFieldMapOutput struct{ *pulumi.OutputState }

func (OutFieldMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]OutField)(nil)).Elem()
}

func (o OutFieldMapOutput) ToOutFieldMapOutput() OutFieldMapOutput {
	return o
}

func (o OutFieldMapOutput) ToOutFieldMapOutputWithContext(ctx context.Context) OutFieldMapOutput {
	return o
}

func (o OutFieldMapOutput) MapIndex(k pulumi.StringInput) OutFieldOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) OutField {
		return vs[0].(map[string]OutField)[vs[1].(string)]
	}).(OutFieldOutput)
}

type OutSection struct {
	Fields map[string]OutField `pulumi:"fields"`
	Label  string              `pulumi:"label"`
	Uuid   string              `pulumi:"uuid"`
}

type OutSectionOutput struct{ *pulumi.OutputState }

func (OutSectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutSection)(nil)).Elem()
}

func (o OutSectionOutput) ToOutSectionOutput() OutSectionOutput {
	return o
}

func (o OutSectionOutput) ToOutSectionOutputWithContext(ctx context.Context) OutSectionOutput {
	return o
}

func (o OutSectionOutput) Fields() OutFieldMapOutput {
	return o.ApplyT(func(v OutSection) map[string]OutField { return v.Fields }).(OutFieldMapOutput)
}

func (o OutSectionOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v OutSection) string { return v.Label }).(pulumi.StringOutput)
}

func (o OutSectionOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v OutSection) string { return v.Uuid }).(pulumi.StringOutput)
}

type OutSectionMapOutput struct{ *pulumi.OutputState }

func (OutSectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]OutSection)(nil)).Elem()
}

func (o OutSectionMapOutput) ToOutSectionMapOutput() OutSectionMapOutput {
	return o
}

func (o OutSectionMapOutput) ToOutSectionMapOutputWithContext(ctx context.Context) OutSectionMapOutput {
	return o
}

func (o OutSectionMapOutput) MapIndex(k pulumi.StringInput) OutSectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) OutSection {
		return vs[0].(map[string]OutSection)[vs[1].(string)]
	}).(OutSectionOutput)
}

type PasswordRecipe struct {
	Digits  *bool `pulumi:"digits"`
	Length  int   `pulumi:"length"`
	Letters *bool `pulumi:"letters"`
	Symbols *bool `pulumi:"symbols"`
}

type Section struct {
	Fields map[string]Field `pulumi:"fields"`
}

// SectionInput is an input type that accepts SectionArgs and SectionOutput values.
// You can construct a concrete instance of `SectionInput` via:
//
//	SectionArgs{...}
type SectionInput interface {
	pulumi.Input

	ToSectionOutput() SectionOutput
	ToSectionOutputWithContext(context.Context) SectionOutput
}

type SectionArgs struct {
	Fields FieldMapInput `pulumi:"fields"`
}

func (SectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Section)(nil)).Elem()
}

func (i SectionArgs) ToSectionOutput() SectionOutput {
	return i.ToSectionOutputWithContext(context.Background())
}

func (i SectionArgs) ToSectionOutputWithContext(ctx context.Context) SectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SectionOutput)
}

// SectionMapInput is an input type that accepts SectionMap and SectionMapOutput values.
// You can construct a concrete instance of `SectionMapInput` via:
//
//	SectionMap{ "key": SectionArgs{...} }
type SectionMapInput interface {
	pulumi.Input

	ToSectionMapOutput() SectionMapOutput
	ToSectionMapOutputWithContext(context.Context) SectionMapOutput
}

type SectionMap map[string]SectionInput

func (SectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Section)(nil)).Elem()
}

func (i SectionMap) ToSectionMapOutput() SectionMapOutput {
	return i.ToSectionMapOutputWithContext(context.Background())
}

func (i SectionMap) ToSectionMapOutputWithContext(ctx context.Context) SectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SectionMapOutput)
}

type SectionOutput struct{ *pulumi.OutputState }

func (SectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Section)(nil)).Elem()
}

func (o SectionOutput) ToSectionOutput() SectionOutput {
	return o
}

func (o SectionOutput) ToSectionOutputWithContext(ctx context.Context) SectionOutput {
	return o
}

func (o SectionOutput) Fields() FieldMapOutput {
	return o.ApplyT(func(v Section) map[string]Field { return v.Fields }).(FieldMapOutput)
}

type SectionMapOutput struct{ *pulumi.OutputState }

func (SectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Section)(nil)).Elem()
}

func (o SectionMapOutput) ToSectionMapOutput() SectionMapOutput {
	return o
}

func (o SectionMapOutput) ToSectionMapOutputWithContext(ctx context.Context) SectionMapOutput {
	return o
}

func (o SectionMapOutput) MapIndex(k pulumi.StringInput) SectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Section {
		return vs[0].(map[string]Section)[vs[1].(string)]
	}).(SectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FieldInput)(nil)).Elem(), FieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldMapInput)(nil)).Elem(), FieldMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*SectionInput)(nil)).Elem(), SectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SectionMapInput)(nil)).Elem(), SectionMap{})
	pulumi.RegisterOutputType(FieldOutput{})
	pulumi.RegisterOutputType(FieldMapOutput{})
	pulumi.RegisterOutputType(OutFieldOutput{})
	pulumi.RegisterOutputType(OutFieldMapOutput{})
	pulumi.RegisterOutputType(OutSectionOutput{})
	pulumi.RegisterOutputType(OutSectionMapOutput{})
	pulumi.RegisterOutputType(SectionOutput{})
	pulumi.RegisterOutputType(SectionMapOutput{})
}
