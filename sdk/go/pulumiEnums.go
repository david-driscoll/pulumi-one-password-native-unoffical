// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumi_one_password_native_unofficial

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The category of the item. One of [ApiCredential, BankAccount, CreditCard, CryptoWallet, Database, Document, DriverLicense, EmailAccount, Identity, Item, Login, MedicalRecord, Membership, OutdoorLicense, Passport, Password, RewardProgram, SshKey, SecureNote, Server, SocialSecurityNumber, SoftwareLicense, WirelessRouter]
type Category string

const (
	CategoryApiCredential        = Category("API Credential")
	CategoryBankAccount          = Category("Bank Account")
	CategoryCreditCard           = Category("Credit Card")
	CategoryCryptoWallet         = Category("Crypto Wallet")
	CategoryDatabase             = Category("Database")
	CategoryDocument             = Category("Document")
	CategoryDriverLicense        = Category("Driver License")
	CategoryEmailAccount         = Category("Email Account")
	CategoryIdentity             = Category("Identity")
	CategoryItem                 = Category("Item")
	CategoryLogin                = Category("Login")
	CategoryMedicalRecord        = Category("Medical Record")
	CategoryMembership           = Category("Membership")
	CategoryOutdoorLicense       = Category("Outdoor License")
	CategoryPassport             = Category("Passport")
	CategoryPassword             = Category("Password")
	CategoryRewardProgram        = Category("Reward Program")
	CategorySshKey               = Category("SSH Key")
	CategorySecureNote           = Category("Secure Note")
	CategoryServer               = Category("Server")
	CategorySocialSecurityNumber = Category("Social Security Number")
	CategorySoftwareLicense      = Category("Software License")
	CategoryWirelessRouter       = Category("Wireless Router")
)

type FieldPurpose string

const (
	FieldPurposeUsername = FieldPurpose("USERNAME")
	FieldPurposePassword = FieldPurpose("PASSWORD")
	FieldPurposeNote     = FieldPurpose("NOTE")
)

type FieldType string

const (
	FieldTypeUnknown          = FieldType("UNKNOWN")
	FieldTypeAddress          = FieldType("ADDRESS")
	FieldTypeConcealed        = FieldType("CONCEALED")
	FieldTypeCreditCardNumber = FieldType("CREDIT_CARD_NUMBER")
	FieldTypeCreditCardType   = FieldType("CREDIT_CARD_TYPE")
	FieldTypeDate             = FieldType("DATE")
	FieldTypeEmail            = FieldType("EMAIL")
	FieldTypeGender           = FieldType("GENDER")
	FieldTypeMenu             = FieldType("MENU")
	FieldTypeMonthYear        = FieldType("MONTH_YEAR")
	FieldTypeOtp              = FieldType("OTP")
	FieldTypePhone            = FieldType("PHONE")
	FieldTypeReference        = FieldType("REFERENCE")
	FieldTypeString           = FieldType("STRING")
	FieldTypeUrl              = FieldType("URL")
	FieldTypeFile             = FieldType("FILE")
	FieldTypeSshKey           = FieldType("SSHKEY")
)

func (FieldType) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldType)(nil)).Elem()
}

func (e FieldType) ToFieldTypeOutput() FieldTypeOutput {
	return pulumi.ToOutput(e).(FieldTypeOutput)
}

func (e FieldType) ToFieldTypeOutputWithContext(ctx context.Context) FieldTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FieldTypeOutput)
}

func (e FieldType) ToFieldTypePtrOutput() FieldTypePtrOutput {
	return e.ToFieldTypePtrOutputWithContext(context.Background())
}

func (e FieldType) ToFieldTypePtrOutputWithContext(ctx context.Context) FieldTypePtrOutput {
	return FieldType(e).ToFieldTypeOutputWithContext(ctx).ToFieldTypePtrOutputWithContext(ctx)
}

func (e FieldType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FieldType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FieldType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FieldType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FieldTypeOutput struct{ *pulumi.OutputState }

func (FieldTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldType)(nil)).Elem()
}

func (o FieldTypeOutput) ToFieldTypeOutput() FieldTypeOutput {
	return o
}

func (o FieldTypeOutput) ToFieldTypeOutputWithContext(ctx context.Context) FieldTypeOutput {
	return o
}

func (o FieldTypeOutput) ToFieldTypePtrOutput() FieldTypePtrOutput {
	return o.ToFieldTypePtrOutputWithContext(context.Background())
}

func (o FieldTypeOutput) ToFieldTypePtrOutputWithContext(ctx context.Context) FieldTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FieldType) *FieldType {
		return &v
	}).(FieldTypePtrOutput)
}

func (o FieldTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FieldTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FieldType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FieldTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FieldTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FieldType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FieldTypePtrOutput struct{ *pulumi.OutputState }

func (FieldTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FieldType)(nil)).Elem()
}

func (o FieldTypePtrOutput) ToFieldTypePtrOutput() FieldTypePtrOutput {
	return o
}

func (o FieldTypePtrOutput) ToFieldTypePtrOutputWithContext(ctx context.Context) FieldTypePtrOutput {
	return o
}

func (o FieldTypePtrOutput) Elem() FieldTypeOutput {
	return o.ApplyT(func(v *FieldType) FieldType {
		if v != nil {
			return *v
		}
		var ret FieldType
		return ret
	}).(FieldTypeOutput)
}

func (o FieldTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FieldTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FieldType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FieldTypeInput is an input type that accepts FieldTypeArgs and FieldTypeOutput values.
// You can construct a concrete instance of `FieldTypeInput` via:
//
//	FieldTypeArgs{...}
type FieldTypeInput interface {
	pulumi.Input

	ToFieldTypeOutput() FieldTypeOutput
	ToFieldTypeOutputWithContext(context.Context) FieldTypeOutput
}

var fieldTypePtrType = reflect.TypeOf((**FieldType)(nil)).Elem()

type FieldTypePtrInput interface {
	pulumi.Input

	ToFieldTypePtrOutput() FieldTypePtrOutput
	ToFieldTypePtrOutputWithContext(context.Context) FieldTypePtrOutput
}

type fieldTypePtr string

func FieldTypePtr(v string) FieldTypePtrInput {
	return (*fieldTypePtr)(&v)
}

func (*fieldTypePtr) ElementType() reflect.Type {
	return fieldTypePtrType
}

func (in *fieldTypePtr) ToFieldTypePtrOutput() FieldTypePtrOutput {
	return pulumi.ToOutput(in).(FieldTypePtrOutput)
}

func (in *fieldTypePtr) ToFieldTypePtrOutputWithContext(ctx context.Context) FieldTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FieldTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FieldTypeInput)(nil)).Elem(), FieldType("UNKNOWN"))
	pulumi.RegisterInputType(reflect.TypeOf((*FieldTypePtrInput)(nil)).Elem(), FieldType("UNKNOWN"))
	pulumi.RegisterOutputType(FieldTypeOutput{})
	pulumi.RegisterOutputType(FieldTypePtrOutput{})
}
