// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumi_one_password_native_unofficial

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetOutdoorLicense(ctx *pulumi.Context, args *GetOutdoorLicenseArgs, opts ...pulumi.InvokeOption) (*GetOutdoorLicenseResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetOutdoorLicenseResult
	err := ctx.Invoke("one-password-native-unofficial:index:GetOutdoorLicense", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetOutdoorLicenseArgs struct {
	// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
	Id *string `pulumi:"id"`
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title *string `pulumi:"title"`
	// The UUID of the vault the item is in.
	Vault string `pulumi:"vault"`
}

type GetOutdoorLicenseResult struct {
	ApprovedWildlife *string                     `pulumi:"approvedWildlife"`
	Attachments      map[string]OutputAttachment `pulumi:"attachments"`
	Category         string                      `pulumi:"category"`
	Country          *string                     `pulumi:"country"`
	Expires          *string                     `pulumi:"expires"`
	Fields           map[string]OutputField      `pulumi:"fields"`
	FullName         *string                     `pulumi:"fullName"`
	// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
	Id           string                   `pulumi:"id"`
	MaximumQuota *string                  `pulumi:"maximumQuota"`
	Notes        *string                  `pulumi:"notes"`
	References   []OutputReference        `pulumi:"references"`
	Sections     map[string]OutputSection `pulumi:"sections"`
	State        *string                  `pulumi:"state"`
	// An array of strings of the tags assigned to the item.
	Tags []string `pulumi:"tags"`
	// The title of the item.
	Title     string      `pulumi:"title"`
	Urls      []OutputUrl `pulumi:"urls"`
	ValidFrom *string     `pulumi:"validFrom"`
	Vault     OutputVault `pulumi:"vault"`
}

func GetOutdoorLicenseOutput(ctx *pulumi.Context, args GetOutdoorLicenseOutputArgs, opts ...pulumi.InvokeOption) GetOutdoorLicenseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetOutdoorLicenseResult, error) {
			args := v.(GetOutdoorLicenseArgs)
			r, err := GetOutdoorLicense(ctx, &args, opts...)
			var s GetOutdoorLicenseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetOutdoorLicenseResultOutput)
}

type GetOutdoorLicenseOutputArgs struct {
	// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UUID of the vault the item is in.
	Vault pulumi.StringInput `pulumi:"vault"`
}

func (GetOutdoorLicenseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOutdoorLicenseArgs)(nil)).Elem()
}

type GetOutdoorLicenseResultOutput struct{ *pulumi.OutputState }

func (GetOutdoorLicenseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOutdoorLicenseResult)(nil)).Elem()
}

func (o GetOutdoorLicenseResultOutput) ToGetOutdoorLicenseResultOutput() GetOutdoorLicenseResultOutput {
	return o
}

func (o GetOutdoorLicenseResultOutput) ToGetOutdoorLicenseResultOutputWithContext(ctx context.Context) GetOutdoorLicenseResultOutput {
	return o
}

func (o GetOutdoorLicenseResultOutput) ApprovedWildlife() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) *string { return v.ApprovedWildlife }).(pulumi.StringPtrOutput)
}

func (o GetOutdoorLicenseResultOutput) Attachments() OutputAttachmentMapOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) map[string]OutputAttachment { return v.Attachments }).(OutputAttachmentMapOutput)
}

func (o GetOutdoorLicenseResultOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) string { return v.Category }).(pulumi.StringOutput)
}

func (o GetOutdoorLicenseResultOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) *string { return v.Country }).(pulumi.StringPtrOutput)
}

func (o GetOutdoorLicenseResultOutput) Expires() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) *string { return v.Expires }).(pulumi.StringPtrOutput)
}

func (o GetOutdoorLicenseResultOutput) Fields() OutputFieldMapOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) map[string]OutputField { return v.Fields }).(OutputFieldMapOutput)
}

func (o GetOutdoorLicenseResultOutput) FullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) *string { return v.FullName }).(pulumi.StringPtrOutput)
}

// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
func (o GetOutdoorLicenseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetOutdoorLicenseResultOutput) MaximumQuota() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) *string { return v.MaximumQuota }).(pulumi.StringPtrOutput)
}

func (o GetOutdoorLicenseResultOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) *string { return v.Notes }).(pulumi.StringPtrOutput)
}

func (o GetOutdoorLicenseResultOutput) References() OutputReferenceArrayOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) []OutputReference { return v.References }).(OutputReferenceArrayOutput)
}

func (o GetOutdoorLicenseResultOutput) Sections() OutputSectionMapOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) map[string]OutputSection { return v.Sections }).(OutputSectionMapOutput)
}

func (o GetOutdoorLicenseResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// An array of strings of the tags assigned to the item.
func (o GetOutdoorLicenseResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The title of the item.
func (o GetOutdoorLicenseResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) string { return v.Title }).(pulumi.StringOutput)
}

func (o GetOutdoorLicenseResultOutput) Urls() OutputUrlArrayOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) []OutputUrl { return v.Urls }).(OutputUrlArrayOutput)
}

func (o GetOutdoorLicenseResultOutput) ValidFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) *string { return v.ValidFrom }).(pulumi.StringPtrOutput)
}

func (o GetOutdoorLicenseResultOutput) Vault() OutputVaultOutput {
	return o.ApplyT(func(v GetOutdoorLicenseResult) OutputVault { return v.Vault }).(OutputVaultOutput)
}

func init() {
	pulumi.RegisterOutputType(GetOutdoorLicenseResultOutput{})
}
