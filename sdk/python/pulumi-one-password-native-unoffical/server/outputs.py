# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AdminConsoleSection',
    'HostingProviderSection',
]

@pulumi.output_type
class AdminConsoleSection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminConsoleUrl":
            suggest = "admin_console_url"
        elif key == "adminConsoleUsername":
            suggest = "admin_console_username"
        elif key == "consolePassword":
            suggest = "console_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdminConsoleSection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdminConsoleSection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdminConsoleSection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_console_url: Optional[str] = None,
                 admin_console_username: Optional[str] = None,
                 console_password: Optional[str] = None):
        if admin_console_url is not None:
            pulumi.set(__self__, "admin_console_url", admin_console_url)
        if admin_console_username is not None:
            pulumi.set(__self__, "admin_console_username", admin_console_username)
        if console_password is not None:
            pulumi.set(__self__, "console_password", console_password)

    @property
    @pulumi.getter(name="adminConsoleUrl")
    def admin_console_url(self) -> Optional[str]:
        return pulumi.get(self, "admin_console_url")

    @property
    @pulumi.getter(name="adminConsoleUsername")
    def admin_console_username(self) -> Optional[str]:
        return pulumi.get(self, "admin_console_username")

    @property
    @pulumi.getter(name="consolePassword")
    def console_password(self) -> Optional[str]:
        return pulumi.get(self, "console_password")


@pulumi.output_type
class HostingProviderSection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "supportPhone":
            suggest = "support_phone"
        elif key == "supportUrl":
            suggest = "support_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostingProviderSection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostingProviderSection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostingProviderSection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 support_phone: Optional[str] = None,
                 support_url: Optional[str] = None,
                 website: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if support_phone is not None:
            pulumi.set(__self__, "support_phone", support_phone)
        if support_url is not None:
            pulumi.set(__self__, "support_url", support_url)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="supportPhone")
    def support_phone(self) -> Optional[str]:
        return pulumi.get(self, "support_phone")

    @property
    @pulumi.getter(name="supportUrl")
    def support_url(self) -> Optional[str]:
        return pulumi.get(self, "support_url")

    @property
    @pulumi.getter
    def website(self) -> Optional[str]:
        return pulumi.get(self, "website")


