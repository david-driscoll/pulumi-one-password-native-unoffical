# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'InjectResult',
    'AwaitableInjectResult',
    'inject',
    'inject_output',
]

@pulumi.output_type
class InjectResult:
    """
    The result template with secrets replaced
    """
    def __init__(__self__, result=None):
        if result and not isinstance(result, str):
            raise TypeError("Expected argument 'result' to be a str")
        pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def result(self) -> str:
        return pulumi.get(self, "result")


class AwaitableInjectResult(InjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return InjectResult(
            result=self.result)


def inject(template: Optional[str] = None,
           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableInjectResult:
    """
    Use this data source to access information about an existing resource.

    :param str template: The template that you want transformed with secrets
    """
    __args__ = dict()
    __args__['template'] = template
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('one-password-native-unofficial:index:Inject', __args__, opts=opts, typ=InjectResult).value

    return AwaitableInjectResult(
        result=__ret__.result)


@_utilities.lift_output_func(inject)
def inject_output(template: Optional[pulumi.Input[str]] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[InjectResult]:
    """
    Use this data source to access information about an existing resource.

    :param str template: The template that you want transformed with secrets
    """
    ...
