# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'CustomerSection',
    'OrderSection',
    'PublisherSection',
]

@pulumi.output_type
class CustomerSection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "licensedTo":
            suggest = "licensed_to"
        elif key == "registeredEmail":
            suggest = "registered_email"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomerSection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomerSection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomerSection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 company: Optional[str] = None,
                 licensed_to: Optional[str] = None,
                 registered_email: Optional[str] = None):
        if company is not None:
            pulumi.set(__self__, "company", company)
        if licensed_to is not None:
            pulumi.set(__self__, "licensed_to", licensed_to)
        if registered_email is not None:
            pulumi.set(__self__, "registered_email", registered_email)

    @property
    @pulumi.getter
    def company(self) -> Optional[str]:
        return pulumi.get(self, "company")

    @property
    @pulumi.getter(name="licensedTo")
    def licensed_to(self) -> Optional[str]:
        return pulumi.get(self, "licensed_to")

    @property
    @pulumi.getter(name="registeredEmail")
    def registered_email(self) -> Optional[str]:
        return pulumi.get(self, "registered_email")


@pulumi.output_type
class OrderSection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "orderNumber":
            suggest = "order_number"
        elif key == "orderTotal":
            suggest = "order_total"
        elif key == "purchaseDate":
            suggest = "purchase_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrderSection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrderSection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrderSection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 order_number: Optional[str] = None,
                 order_total: Optional[str] = None,
                 purchase_date: Optional[str] = None):
        if order_number is not None:
            pulumi.set(__self__, "order_number", order_number)
        if order_total is not None:
            pulumi.set(__self__, "order_total", order_total)
        if purchase_date is not None:
            pulumi.set(__self__, "purchase_date", purchase_date)

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[str]:
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="orderTotal")
    def order_total(self) -> Optional[str]:
        return pulumi.get(self, "order_total")

    @property
    @pulumi.getter(name="purchaseDate")
    def purchase_date(self) -> Optional[str]:
        return pulumi.get(self, "purchase_date")


@pulumi.output_type
class PublisherSection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadPage":
            suggest = "download_page"
        elif key == "retailPrice":
            suggest = "retail_price"
        elif key == "supportEmail":
            suggest = "support_email"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PublisherSection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PublisherSection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PublisherSection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_page: Optional[str] = None,
                 publisher: Optional[str] = None,
                 retail_price: Optional[str] = None,
                 support_email: Optional[str] = None,
                 website: Optional[str] = None):
        if download_page is not None:
            pulumi.set(__self__, "download_page", download_page)
        if publisher is not None:
            pulumi.set(__self__, "publisher", publisher)
        if retail_price is not None:
            pulumi.set(__self__, "retail_price", retail_price)
        if support_email is not None:
            pulumi.set(__self__, "support_email", support_email)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter(name="downloadPage")
    def download_page(self) -> Optional[str]:
        return pulumi.get(self, "download_page")

    @property
    @pulumi.getter
    def publisher(self) -> Optional[str]:
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter(name="retailPrice")
    def retail_price(self) -> Optional[str]:
        return pulumi.get(self, "retail_price")

    @property
    @pulumi.getter(name="supportEmail")
    def support_email(self) -> Optional[str]:
        return pulumi.get(self, "support_email")

    @property
    @pulumi.getter
    def website(self) -> Optional[str]:
        return pulumi.get(self, "website")


