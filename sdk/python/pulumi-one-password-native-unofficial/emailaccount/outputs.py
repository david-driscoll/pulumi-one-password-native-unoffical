# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ContactInformationSection',
    'SmtpSection',
]

@pulumi.output_type
class ContactInformationSection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "phoneLocal":
            suggest = "phone_local"
        elif key == "phoneTollFree":
            suggest = "phone_toll_free"
        elif key == "providersWebsite":
            suggest = "providers_website"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContactInformationSection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContactInformationSection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContactInformationSection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 phone_local: Optional[str] = None,
                 phone_toll_free: Optional[str] = None,
                 provider: Optional[str] = None,
                 providers_website: Optional[str] = None):
        if phone_local is not None:
            pulumi.set(__self__, "phone_local", phone_local)
        if phone_toll_free is not None:
            pulumi.set(__self__, "phone_toll_free", phone_toll_free)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if providers_website is not None:
            pulumi.set(__self__, "providers_website", providers_website)

    @property
    @pulumi.getter(name="phoneLocal")
    def phone_local(self) -> Optional[str]:
        return pulumi.get(self, "phone_local")

    @property
    @pulumi.getter(name="phoneTollFree")
    def phone_toll_free(self) -> Optional[str]:
        return pulumi.get(self, "phone_toll_free")

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="providersWebsite")
    def providers_website(self) -> Optional[str]:
        return pulumi.get(self, "providers_website")


@pulumi.output_type
class SmtpSection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMethod":
            suggest = "auth_method"
        elif key == "portNumber":
            suggest = "port_number"
        elif key == "smtpServer":
            suggest = "smtp_server"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmtpSection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmtpSection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmtpSection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_method: Optional[str] = None,
                 password: Optional[str] = None,
                 port_number: Optional[str] = None,
                 security: Optional[str] = None,
                 smtp_server: Optional[str] = None,
                 username: Optional[str] = None):
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port_number is not None:
            pulumi.set(__self__, "port_number", port_number)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if smtp_server is not None:
            pulumi.set(__self__, "smtp_server", smtp_server)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_method")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> Optional[str]:
        return pulumi.get(self, "port_number")

    @property
    @pulumi.getter
    def security(self) -> Optional[str]:
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="smtpServer")
    def smtp_server(self) -> Optional[str]:
        return pulumi.get(self, "smtp_server")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


