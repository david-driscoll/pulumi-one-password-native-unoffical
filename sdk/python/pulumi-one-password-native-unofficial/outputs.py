# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'OutputAttachment',
    'OutputField',
    'OutputReference',
    'OutputSection',
    'OutputUrl',
]

@pulumi.output_type
class OutputAttachment(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 reference: str,
                 size: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "reference", reference)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def reference(self) -> str:
        return pulumi.get(self, "reference")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")


@pulumi.output_type
class OutputField(dict):
    def __init__(__self__, *,
                 data: Mapping[str, Any],
                 id: str,
                 label: str,
                 reference: str,
                 type: 'FieldType',
                 value: str):
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "reference", reference)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def data(self) -> Mapping[str, Any]:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def reference(self) -> str:
        return pulumi.get(self, "reference")

    @property
    @pulumi.getter
    def type(self) -> 'FieldType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class OutputReference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "itemId":
            suggest = "item_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputReference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputReference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputReference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 item_id: str,
                 label: str,
                 reference: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "item_id", item_id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "reference", reference)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="itemId")
    def item_id(self) -> str:
        return pulumi.get(self, "item_id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def reference(self) -> str:
        return pulumi.get(self, "reference")


@pulumi.output_type
class OutputSection(dict):
    def __init__(__self__, *,
                 fields: Mapping[str, 'outputs.OutputField'],
                 id: str,
                 label: str,
                 attachments: Optional[Mapping[str, 'outputs.OutputAttachment']] = None):
        pulumi.set(__self__, "fields", fields)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        if attachments is not None:
            pulumi.set(__self__, "attachments", attachments)

    @property
    @pulumi.getter
    def fields(self) -> Mapping[str, 'outputs.OutputField']:
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def attachments(self) -> Optional[Mapping[str, 'outputs.OutputAttachment']]:
        return pulumi.get(self, "attachments")


@pulumi.output_type
class OutputUrl(dict):
    def __init__(__self__, *,
                 href: str,
                 primary: bool,
                 label: Optional[str] = None):
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "primary", primary)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")


